; extensions.conf - CSBox Version 1.0.0 DATA 24/02/2020
;
;
[general]
;
; If static is set to no, or omitted, then the pbx_config will rewrite
; this file when extensions are modified.  Remember that all comments
; made in the file will be lost when that happens.
;
; XXX Not yet implemented XXX
;
;static=yes
;
; if static=yes and writeprotect=no, you can save dialplan by
; CLI command "dialplan save" too
;
writeprotect=no
;
; If autofallthrough is set, then if an extension runs out of
; things to do, it will terminate the call with BUSY, CONGESTION
; or HANGUP depending on Asterisk's best guess. This is the default.
;
; If autofallthrough is not set, then if an extension runs out of
; things to do, Asterisk will wait for a new extension to be dialed
; (this is the original behavior of Asterisk 1.0 and earlier).
;
autofallthrough=yes
static= yes
;
;
;
; If extenpatternmatchnew is set (true, yes, etc), then a new algorithm that uses
; a Trie to find the best matching pattern is used. In dialplans
; with more than about 20-40 extensions in a single context, this
; new algorithm can provide a noticeable speedup.
; With 50 extensions, the speedup is 1.32x
; with 88 extensions, the speedup is 2.23x
; with 138 extensions, the speedup is 3.44x
; with 238 extensions, the speedup is 5.8x
; with 438 extensions, the speedup is 10.4x
; With 1000 extensions, the speedup is ~25x
; with 10,000 extensions, the speedup is 374x
; Basically, the new algorithm provides a flat response
; time, no matter the number of extensions.
;
; By default, the old pattern matcher is used.
;
; ****This is a new feature! *********************
; The new pattern matcher is for the brave, the bold, and
; the desperate. If you have large dialplans (more than about 50 extensions
; in a context), and/or high call volume, you might consider setting
; this value to "yes" !!
; Please, if you try this out, and are forced to return to the
; old pattern matcher, please report your reasons in a bug report
; on bugs.digium.com. We have made good progress in providing something
; compatible with the old matcher; help us finish the job!
;
; This value can be switched at runtime using the cli command "dialplan set extenpatternmatchnew true"
; or "dialplan set extenpatternmatchnew false", so you can experiment to your hearts content.
;
;extenpatternmatchnew=no
;
; If clearglobalvars is set, global variables will be cleared
; and reparsed on a dialplan reload, or Asterisk reload.
;
; If clearglobalvars is not set, then global variables will persist
; through reloads, and even if deleted from the extensions.conf or
; one of its included files, will remain set to the previous value.
;
; NOTE: A complication sets in, if you put your global variables into
; the AEL file, instead of the extensions.conf file. With clearglobalvars
; set, a "reload" will often leave the globals vars cleared, because it
; is not unusual to have extensions.conf (which will have no globals)
; load after the extensions.ael file (where the global vars are stored).
; So, with "reload" in this particular situation, first the AEL file will
; clear and then set all the global vars, then, later, when the extensions.conf
; file is loaded, the global vars are all cleared, and then not set, because
; they are not stored in the extensions.conf file.
;
clearglobalvars=no
;
; User context is where entries from users.conf are registered.  The
; default value is 'default'
;
;userscontext=default
;
; You can include other config files, use the #include command
; (without the ';'). Note that this is different from the "include" command
; that includes contexts within other contexts. The #include command works
; in all asterisk configuration files.
;#include "filename.conf"
;#include <filename.conf>
;#include filename.conf
;
; You can execute a program or script that produces config files, and they
; will be inserted where you insert the #exec command. The #exec command
; works on all asterisk configuration files.  However, you will need to
; activate them within asterisk.conf with the "execincludes" option.  They
; are otherwise considered a security risk.
;#exec /opt/bin/build-extra-contexts.sh
;#exec /opt/bin/build-extra-contexts.sh --foo="bar"
;#exec </opt/bin/build-extra-contexts.sh --foo="bar">
;#exec "/opt/bin/build-extra-contexts.sh --foo=\"bar\""
;

; The "Globals" category contains global variables that can be referenced
; in the dialplan with the GLOBAL dialplan function:
; ${GLOBAL(VARIABLE)}
; ${${GLOBAL(VARIABLE)}} or ${text${GLOBAL(VARIABLE)}} or any hybrid
; Unix/Linux environmental variables can be reached with the ENV dialplan
; function: ${ENV(VARIABLE)}
;
[globals]

;////////////

CONSOLE=Console/dsp				; Console interface for demo
;CONSOLE=DAHDI/1
;CONSOLE=Phone/phone0
IAXINFO=guest					; IAXtel username/password
;IAXINFO=myuser:mypass
TRUNK=DAHDI/G0					; Trunk interface


;
TRUNKMSD=1					; MSD digits to strip (usually 1 or 0)
;TRUNK=IAX2/user:pass@provider

;FREENUMDOMAIN=mydomain.com                     ; domain to send on outbound
                                                ; freenum calls (uses outbound-freenum
                                                ; context)

;
; WARNING WARNING WARNING WARNING
; If you load any other extension configuration engine, such as pbx_ael.so,
; your global variables may be overridden by that file.  Please take care to
; use only one location to set global variables, and you will likely save
; yourself a ton of grief.
; WARNING WARNING WARNING WARNING
;
; Any category other than "General" and "Globals" represent
; extension contexts, which are collections of extensions.
;
; Extension names may be numbers, letters, or combinations
; thereof. If an extension name is prefixed by a '_'
; character, it is interpreted as a pattern rather than a
; literal.  In patterns, some characters have special meanings:
;
;   X - any digit from 0-9
;   Z - any digit from 1-9
;   N - any digit from 2-9
;   [1235-9] - any digit in the brackets (in this example, 1,2,3,5,6,7,8,9)
;   . - wildcard, matches anything remaining (e.g. _9011. matches
;	anything starting with 9011 excluding 9011 itself)
;   ! - wildcard, causes the matching process to complete as soon as
;       it can unambiguously determine that no other matches are possible
;
; For example, the extension _NXXXXXX would match normal 7 digit dialings,
; while _1NXXNXXXXXX would represent an area code plus phone number
; preceded by a one.
;
; Each step of an extension is ordered by priority, which must always start
; with 1 to be considered a valid extension.  The priority "next" or "n" means
; the previous priority plus one, regardless of whether the previous priority
; was associated with the current extension or not.  The priority "same" or "s"
; means the same as the previously specified priority, again regardless of
; whether the previous entry was for the same extension.  Priorities may be
; immediately followed by a plus sign and another integer to add that amount
; (most useful with 's' or 'n').  Priorities may then also have an alias, or
; label, in parentheses after their name which can be used in goto situations.
;
; Contexts contain several lines, one for each step of each extension.  One may
; include another context in the current one as well, optionally with a date
; and time.  Included contexts are included in the order they are listed.
; Switches may also be included within a context.  The order of matching within
; a context is always exact extensions, pattern match extensions, includes, and
; switches.  Includes are always processed depth-first.  So for example, if you
; would like a switch "A" to match before context "B", simply put switch "A" in
; an included context "C", where "C" is included in your original context
; before "B".
;
;[context]
;exten => someexten,{priority|label{+|-}offset}[(alias)],application(arg1,arg2,...)
;
; Timing list for includes is
;
;   <time range>,<days of week>,<days of month>,<months>[,<timezone>]
;
; Note that ranges may be specified to wrap around the ends.  Also, minutes are
; fine-grained only down to the closest even minute.
;
;include => daytime,9:00-17:00,mon-fri,*,*
;include => weekend,*,sat-sun,*,*
;include => weeknights,17:02-8:58,mon-fri,*,*
;
; ignorepat can be used to instruct drivers to not cancel dialtone upon receipt
; of a particular pattern.  The most commonly used example is of course '9'
; like this:
;
;ignorepat => 9
;
; so that dialtone remains even after dialing a 9.  Please note that ignorepat
; only works with channels which receive dialtone from the PBX, such as DAHDI,
; Phone, and VPB.  Other channels, such as SIP and MGCP, which generate their
; own dialtone and converse with the PBX only after a number is complete, are
; generally unaffected by ignorepat (unless DISA or another method is used to
; generate a dialtone after answering the channel).
;

;
[macro-trunkdial]
;
; Standard trunk dial macro (hangs up on a dialstatus that should
; terminate call)
;   ${ARG1} - What to dial
;
exten => s,1,Dial(${ARG1})
exten => s,n,Goto(s-${DIALSTATUS},1)
exten => s-NOANSWER,1,Hangup
exten => s-BUSY,1,Hangup
exten => _s-.,1,NoOp


[demo]
;include => stdexten
;
; We start with what to do when a call first comes in.
;
exten => s,1,Wait(1)			; Wait a second, just for fun
exten => s,n,Answer			; Answer the line
exten => s,n,Set(TIMEOUT(digit)=5)	; Set Digit Timeout to 5 seconds
exten => s,n,Set(TIMEOUT(response)=10)	; Set Response Timeout to 10 seconds
exten => s,n(restart),BackGround(demo-congrats)	; Play a congratulatory message
exten => s,n(instruct),BackGround(demo-instruct)	; Play some instructions
exten => s,n,WaitExten			; Wait for an extension to be dialed.

exten => 2,1,BackGround(demo-moreinfo)	; Give some more information.
exten => 2,n,Goto(s,instruct)

exten => 3,1,Set(LANGUAGE()=fr)		; Set language to french
exten => 3,n,Goto(s,restart)		; Start with the congratulations

exten => 1000,1,Goto(default,s,1)
;
; We also create an example user, 1234, who is on the console and has
; voicemail, etc.
;
exten => 1234,1,Playback(transfer,skip)		; "Please hold while..."
					; (but skip if channel is not up)
exten => 1234,n,Gosub(${EXTEN},stdexten(${GLOBAL(CONSOLE)}))
exten => 1234,n,Goto(default,s,1)		; exited Voicemail

exten => 1235,1,Voicemail(1234,u)		; Right to voicemail

exten => 1236,1,Dial(Console/dsp)		; Ring forever
exten => 1236,n,Voicemail(1234,b)		; Unless busy

;
; # for when they're done with the demo
;
exten => #,1,Playback(demo-thanks)	; "Thanks for trying the demo"
exten => #,n,Hangup			; Hang them up.

;
; A timeout and "invalid extension rule"
;
exten => t,1,Goto(#,1)			; If they take too long, give up
exten => i,1,Playback(invalid)		; "That's not valid, try again"

;
; Create an extension, 500, for dialing the
; Asterisk demo.
;
exten => 500,1,Playback(demo-abouttotry); Let them know what's going on
exten => 500,n,Dial(IAX2/guest@pbx.digium.com/s@default)	; Call the Asterisk demo
exten => 500,n,Playback(demo-nogo)	; Couldn't connect to the demo site
exten => 500,n,Goto(s,6)		; Return to the start over message.

;
; Create an extension, 600, for evaluating echo latency.
;
exten => 600,1,Playback(demo-echotest)	; Let them know what's going on
exten => 600,n,Echo			; Do the echo test
exten => 600,n,Playback(demo-echodone)	; Let them know it's over
exten => 600,n,Goto(s,6)		; Start over

;
;	You can use the Macro Page to intercom a individual user
exten => 76245,1,Macro(page,SIP/Grandstream1)
; or if your peernames are the same as extensions
exten => _7XXX,1,Macro(page,SIP/${EXTEN})
;
;
; System Wide Page at extension 7999
;
exten => 7999,1,Set(TIMEOUT(absolute)=60)
exten => 7999,2,Page(Local/Grandstream1@page&Local/Xlite1@page&Local/1234@page/n,d)

; Give voicemail at extension 8500
;
exten => 8500,1,VoicemailMain
exten => 8500,n,Goto(s,6)
;
; Here's what a phone entry would look like (IXJ for example)
;
;exten => 1265,1,Dial(Phone/phone0,15)
;exten => 1265,n,Goto(s,5)

;
;	The page context calls up the page macro that sets variables needed for auto-answer
;	It is in is own context to make calling it from the Page() application as simple as
;	Local/{peername}@page
;
[page]
exten => _X.,1,Macro(page,SIP/${EXTEN})

;[mainmenu]
;
; Example "main menu" context with submenu
;
;exten => s,1,Answer
;exten => s,n,Background(thanks)		; "Thanks for calling press 1 for sales, 2 for support, ..."
;exten => s,n,WaitExten
;exten => 1,1,Goto(submenu,s,1)
;exten => 2,1,Hangup
;include => default
;
;[submenu]
;exten => s,1,Ringing					; Make them comfortable with 2 seconds of ringback
;exten => s,n,Wait,2
;exten => s,n,Background(submenuopts)	; "Thanks for calling the sales department.  Press 1 for steve, 2 for..."
;exten => s,n,WaitExten
;exten => 1,1,Goto(default,steve,1)
;exten => 2,1,Goto(default,mark,2)

[default]
;
; By default we include the demo.  In a production system, you
; probably don't want to have the demo there.
;
include => demo



;
; An extension like the one below can be used for FWD, Nikotel, sipgate etc.
; Note that you must have a [sipprovider] section in sip.conf
;
;exten => _41X.,1,Dial(SIP/${FILTER(0-9,${EXTEN:2})}@sipprovider,,r)

; Real extensions would go here. Generally you want real extensions to be
; 4 or 5 digits long (although there is no such requirement) and start with a
; single digit that is fairly large (like 6 or 7) so that you have plenty of
; room to overlap extensions and menu options without conflict.  You can alias
; them with names, too, and use global variables

;exten => 6245,hint,SIP/Grandstream1&SIP/Xlite1(Joe Schmoe) ; Channel hints for presence
;exten => 6245,1,Dial(SIP/Grandstream1,20,rt)	; permit transfer
;exten => 6245,n(dial),Dial(${HINT},20,rtT)	; Use hint as listed
;exten => 6245,n,Voicemail(6245,u)		; Voicemail (unavailable)
;exten => 6245,s+1,Hangup			; s+1, same as n
;exten => 6245,dial+101,Voicemail(6245,b)	; Voicemail (busy)
;exten => 6361,1,Dial(IAX2/JaneDoe,,rm)		; ring without time limit
;exten => 6389,1,Dial(MGCP/aaln/1@192.168.0.14)
;exten => 6390,1,Dial(JINGLE/caller/callee) ; Dial via jingle using labels
;exten => 6391,1,Dial(JINGLE/asterisk@digium.com/mogorman@astjab.org) ;Dial via jingle using asterisk as the transport and calling mogorman.
;exten => 6394,1,Dial(Local/6275/n)		; this will dial ${MARK}

;exten => 6275,1,Gosub(${EXTEN},stdexten(${MARK}))
						; assuming ${MARK} is something like DAHDI/2
;exten => 6275,n,Goto(default,s,1)		; exited Voicemail
;exten => mark,1,Goto(6275,1)			; alias mark to 6275
;exten => 6536,1,Gosub(${EXTEN},stdexten(${WIL}))
						; Ditto for wil
;exten => 6536,n,Goto(default,s,1)		; exited Voicemail
;exten => wil,1,Goto(6236,1)

;If you want to subscribe to the status of a parking space, this is
;how you do it. Subscribe to extension 6600 in sip, and you will see
;the status of the first parking lot with this extensions' help
;exten => 6600,hint,park:701@parkedcalls
;exten => 6600,1,noop
;
; Some other handy things are an extension for checking voicemail via
; voicemailmain
;
;exten => 8500,1,VoicemailMain
;exten => 8500,n,Hangup
;
; Or a conference room (you'll need to edit meetme.conf to enable this room)
;
;exten => 8600,1,Meetme(1234)
;
; Or playing an announcement to the called party, as soon it answers
;
;exten = 8700,1,Dial(${MARK},30,A(/path/to/my/announcemsg))
;

; example of a compartmentalized company called "acme"
;
; this is the context that your incoming IAX/SIP trunk dumps you in...
;[acme-incoming]
;exten => s,1,Wait(1)
;exten => s,n,Answer()
;exten => s,n(menu),Playback(acme/vm-brief-menu)
;exten => s,n(exten),Background(vm-enter-num-to-call)
;exten => s,n,WaitExten(5)
;exten => s,n(goodbye),Playback(vm-goodbye)
;exten => s,n(end),Hangup()
;
;include  => acme-extens
;
;exten => i,1,Playback(vm-invalid)
;exten => i,n,Goto(s,exten)			; optionally, transfer to operator
;
;exten => t,1,Goto(s,goodbye)
;
; this is the context our internal SIP hardphones use (see sip.conf)
;
;[acme-internal]
;exten => s,1,Answer()
;exten => s,n(exten),Background(vm-enter-num-to-call)
;exten => s,n,WaitExten(5)
;exten => s,n(goodbye),Playback(vm-goodbye)
;exten => s,n(end),Hangup()
;
;include => trunkint
;include => trunkld
;include => trunklocal
;
;include => acme-extens
;
; you can test what your system sounds like to outside callers by dialing this
;exten => 777,1,DISA(no-password,acme-incoming)
;
; grouping of acme's extensions... never used directly, always included.
;
;[acme-extens]
;include => stdexten
;exten => 111,1,Gosub(111,stdexten(SIP/pete_1,acme))
;exten => 111,n,Goto(s,exten)
;
;exten => 112,1,Gosub(112,stdexten(SIP/nancy_1,acme))
;exten => 112,n,Goto(s,end)
;
; end of acme example

;
; Time context: you can patch this in via the following.
;
; [acme-internal]
; ...
; exten => 777,1,Gosub(time)
; exten => 777,n,Hangup()
;
; ...
; include => time
;
; Note: if you're geographically spread out, you can have SIP extensions
; specify their own local timezone in sip.conf as:
;
; [boi]
; type=friend
; context=acme-internal
; callerid="Boise Ofc. <2083451111>"
; ...
; ; use system-wide default timezone of MST7MDT
;
; [lws]
; type=friend
; context=acme-internal
; callerid="Lewiston Ofc. <2087431111>"
; ...
; setvar=timezone=PST8PDT
;
; "timezone" isn't a 'reserved' name in any way, and other places where
; the timezone is significant (e.g. calls to "SayUnixTime()", etc) will
; require modification as well.  Note that voicemail.conf already has
; a mechanism for timezones.
;

[time]
exten => _X.,30000(time),NoOp(Time: ${EXTEN} ${timezone})
exten => _X.,n,Wait(0.25)
exten => _X.,n,Answer()
; the amount of delay is set for English; you may need to adjust this time
; for other languages if there's no pause before the synchronizing beep.
exten => _X.,n,Set(FUTURETIME=$[${EPOCH} + 12])
exten => _X.,n,SayUnixTime(${FUTURETIME},Zulu,HNS)
exten => _X.,n,SayPhonetic(z)
; use the timezone associated with the extension (sip only), or system-wide
; default if one hasn't been set.
exten => _X.,n,SayUnixTime(${FUTURETIME},${timezone},HNS)
exten => _X.,n,Playback(spy-local)
exten => _X.,n,WaitUntil(${FUTURETIME})
exten => _X.,n,Playback(beep)
exten => _X.,n,Return()

;
; ANI context: use in the same way as "time" above
;

[ani]
exten => _X.,40000(ani),NoOp(ANI: ${EXTEN})
exten => _X.,n,Wait(0.25)
exten => _X.,n,Answer()
exten => _X.,n,Playback(vm-from)
exten => _X.,n,SayDigits(${CALLERID(ani)})
exten => _X.,n,Wait(1.25)
exten => _X.,n,SayDigits(${CALLERID(ani)})	; playback again in case of missed digit
exten => _X.,n,Return()

; For more information on applications, just type "core show applications" at your
; friendly Asterisk CLI prompt.
;
; "core show application <command>" will show details of how you
; use that particular application in this file, the dial plan.
; "core show functions" will list all dialplan functions
; "core show function <COMMAND>" will show you more information about
; one function. Remember that function names are UPPER CASE.



;//////////////////////////////////////////////////
;//////////////////  IPBX  ////////////////////////
;//////////////////////////////////////////////////

#include Call_360.conf

;#include /etc/asterisk/push-clients/*

[messages] 
;exten => _XXX,1,MessageSend(sip:${EXTEN},"${CALLERID(name)}"${MESSAGE(from)})

exten => 213982406406,1,NoOp(SMS receiving from icosnet)
exten => 213982406406,n,NoOp(To:  ${MESSAGE(to)})
exten => 213982406406,n,NoOp(From:  ${MESSAGE(from)})
exten => 213982406406,n,NoOp(Body:  ${MESSAGE(body)}) 


exten => _XXX,1,NoOp(Message receiving dialplan)
exten => _XXX,n,NoOp(To ${MESSAGE(to)})
exten => _XXX,n,NoOp(From ${MESSAGE(from)})
exten => _XXX,n,NoOp(Body ${MESSAGE(body)})
exten => _XXX,n,Set(LOCALTO=${CUT(MESSAGE(to),@,1)})
exten => _XXX,n,MessageSend(${LOCALTO},${MESSAGE(from)})
exten => _XXX,n,NoOp(Send status is ${MESSAGE_SEND_STATUS})
exten => _XXX,n,GotoIf($[“${MESSAGE_SEND_STATUS}” != “SUCCESS”]?sendfailedmsg)
exten => _XXX,n,Hangup()

; failed send messaging
exten => _XXX,n(sendfailedmsg),Set(MESSAGE(body)=”[${STRFTIME(${EPOCH},,%d%m%Y-%H:%M:%S)}] Your message to ${EXTEN} has failed. Retry later.”)
exten => _XXX,n,Set(LOCALME=${CUT(MESSAGE(from),<,2)})
exten => _XXX,n,Set(LOCALFROM=${CUT(LOCALME,@,1)})
exten => _XXX,n,MessageSend(${LOCALFROM},CSBoxSMC)
exten => _XXX,n,Hangup()

;//////////////////  GOIP 4SIM   ///////////////////


[macro-InFromCRM]
exten => s,1,NoOp(${CALLERID(num)})
exten => s,n,MYSQL(Connect connid localhost callme COMPUsave@2021 callme)
;exten => s,n,MYSQL(Query resultid ${connid} SELECT `agent_number` FROM `clients` WHERE (`tel1` ='${CALLERID(num)}' or `tel2` LIKE '%${CALLERID(num)}%') and `agent_number` not LIKE '' LIMIT 1)
exten => s,n,MYSQL(Query resultid ${connid} SELECT  `name` FROM `clients` WHERE (`primary_number` ='${CALLERID(num)}' or `secondary_number` LIKE '%${CALLERID(num)}%'))
exten => s,n,MYSQL(Fetch fetchid ${resultid} AGENT)
exten => s,n,NoOp(${fetchid})
exten => s,n,GotoIf($[${fetchid} = 0 ]?${ARG1},s,1)
exten => s,n,MYSQL(Clear ${resultid})
exten => s,n,MYSQL(Query resultid ${connid} SELECT  `name` FROM `clients` WHERE (`primary_number` ='${CALLERID(num)}' or `secondary_number` LIKE '%${CALLERID(num)}%'))
exten => s,n,MYSQL(Fetch fetchid ${resultid} NOM_CLIENT)
exten => s,n,MYSQL(Clear ${resultid})
;exten => s,n,MYSQL(Query resultid ${connid} SELECT  `name` FROM `clients` WHERE (`tel1` ='${CALLERID(num)}' or `tel2` LIKE '%${CALLERID(num)}%'))
;exten => s,n,MYSQL(Fetch fetchid ${resultid} NOM_CLIENT)
;exten => s,n,MYSQL(Clear ${resultid})
exten => s,n,MYSQL(Disconnect ${connid})
exten => s,n,Set(CALLERID(name)=${NOM_CLIENT})
exten => s,n,Set(FILENAME=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-outbound-${CALLERID(num)}-${EXTEN}-${UNIQUEID}.wav)
exten => s,n,MixMonitor(${FILENAME},b,/home/support/bin/monitor_file.sh ${FILENAME})
exten => s,n,Dial(SIP/${AGENT},15,tT)
exten => s,n,Goto(s-${DIALSTATUS},1)
exten => s-BUSY,1,Busy
exten => s-BUSY,n,Playtones(busy)
exten => s-BUSY,n,hungup
exten => s-CHANUNAVAIL,1,Goto(${ARG1},s,1)
exten => s-CONGESTION,1,Goto(${ARG1},s,1)
exten => s-NOANSWER,1,Goto(${ARG1},s,1)


[balack]
exten => blacklisted,1,NoOp(${CALLERID(num)})
exten => blacklisted,n,Playback(beep)
exten => blacklisted,n,Hangup




;//////////////////  Op\E9rateure////////////////////////
[ligne_1]
switch => Realtime
;exten => s,1,dial(SIP/778)

[ligne_2]
switch => Realtime
;exten => s,1,dial(DAHDI/G0/0561762715)

[ligne_3]
switch => Realtime
;exten => s,1,dial(DAHDI/G0/0561762715)
[ligne_4]
switch => Realtime
;exten => s,1,dial(DAHDI/G0/0561762715)


[ligne_5]
switch => Realtime

[ligne_6]
switch => Realtime

[ligne_7]
switch => Realtime

[ligne_8]
switch => Realtime

[ligne_9]
switch => Realtime

[ligne_10]
switch => Realtime

[ligne_11]
switch => Realtime

[ligne_12]
switch => Realtime

[ligne_13]
switch => Realtime

[ligne_14]
switch => Realtime

[ligne_15]
switch => Realtime

[ligne_16]
switch => Realtime


;//////////////////  Menu Vocal////////////////////////
[menu_1]
switch => Realtime
[menu_2]
switch => Realtime
[menu_3]
switch => Realtime
[menu_4]
switch => Realtime
[menu_5]
switch => Realtime
[menu_6]
switch => Realtime
[menu_7]
switch => Realtime
[menu_8]
switch => Realtime
[menu_9]
switch => Realtime
[menu_10]
switch => Realtime
[menu_11]
switch => Realtime
[menu_12]
switch => Realtime
[menu_13]
switch => Realtime
[menu_14]
switch => Realtime
[menu_15]
switch => Realtime


[MeetMe]
exten => 9990,1,MeetMe(9100,M)
exten => 9991,1,MeetMe(9991,M)
exten => 9992,1,MeetMe(9992,M)
exten => 9993,1,MeetMe(9993,M)
exten => 9994,1,MeetMe(9994,M)
exten => 9995,1,MeetMe(9995,M)
exten => 9996,1,MeetMe(9996,M)




[from-pstn]
switch => Realtime

exten => fax,1,NoOp(Appel sur la ligne direct du fax)
exten => fax,n,Gosub(faxreceive,s,1)
exten => fax,n,Hangup()




[CONTEXT_FIX]
exten => _0[234].,1,NoOp(${EXTEN})
exten => _0[234].,n,dial(DAHDI/G0/${EXTEN})
exten => _0[234].,n,Hangup
exten => _0[567].,1,Playback(privacy-incorrect)
exten => _0[567].,n,Hangup
exten => 900,1,VoiceMailMain(${CALLERID(num)}@intervoice)
exten => 999,1,MeetMe(1000,M)

exten => 12,1,Dial(DAHDI/G0/${EXTEN},30,tT)
exten => 100,1,Dial(DAHDI/G0/${EXTEN},30,tT)



[CONTEXT_LOCAL_R]
include => from-pstn
exten => _[12345679].,1,Dial(SIP/${EXTEN},30,tT)
exten => _[12345679].,n,Voicemail(${EXTEN}@intervoice)
exten => _[12345679].,n,Hangup


exten => _[8].,1,Set(FILENAME=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-outbound-${CALLERID(num)}-${EXTEN}-${UNIQUEID}.wav)
exten => _[8].,n,MixMonitor(${FILENAME},b,/home/support/bin/monitor_file.sh ${FILENAME})
exten => _[8].,n,dial(IAX2/${EXTEN},60,T)
exten => _[8].,n,Hangup

exten => 900,1,VoiceMailMain(${CALLERID(num)}@intervoice)
exten => 999,1,MeetMe(1000,M)
exten => 888,1,goto(faxreceive,s,1)


;exten => 561,1,Dial(SIP/${EXTEN},10,tT)

exten => 561,1,Dial(SIP/gsm2/20551727065${EXTEN})
exten => 561,n,Dial(SIP/gsm1/10551727065${EXTEN})


;exten => 561,1,Dial(SIP/507,0,tT)
;exten => 561,n,Hangup


;exten => 561,1,GoToIf(SIP/507,0,tT?s,3)
;exten => 561,2,Dial(SIP/${EXTEN},10,tT)
;exten => 561,3,Hangup


  exten => 502,1,GotoIf($["${CALLERID(num)}" = "507"]?s,3)
  exten => 502,2,Dial(SIP/${EXTEN},10,tT)
  exten => 502,3,Hangup()








;; Insertion dynamique file d'attente ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


exten => *21,1,Verbose(2,Connextion Agent dynamiqe plusieur files the database values)
   same => n,GoSub(subSetupAvailableQueues,start,1())  
   same => n,Set(QueueCounter=1)  ; setup a counter variable
   same => n,Set(WorkingQueue=${CUT(AvailableQueues,^,${QueueCounter})})
   same => n,While($[${EXISTS(${WorkingQueue})}])
   same => n,AddQueueMember(${WorkingQueue},${MemberChanType}/${MemberChannel},,,${MemberChanType}/${MemberChannel})
   same => n,Set(QueueCounter=$[${QueueCounter} + 1])    ; increase our counter
   same => n,Set(WorkingQueue=${CUT(AvailableQueues,^,${QueueCounter})})
   same => n,EndWhile()
   same => n,Playback(silence/1&agent-loginok)
   same => n,Hangup()
exten => no_queues_available,1,Verbose(2,No queues available for ${MemberChannel})
   same => n,Playback(silence/1&channel&not-yet-assigned)
   same => n,Hangup()


   exten => *23,1,Verbose(2,Sortie Agent dynamiqe plusieur files)
; Because we reused some code, we've placed the duplicate code into a subroutine
   same => n,GoSub(subSetupAvailableQueues,start,1())   
   same => n,Set(QueueCounter=1)
   same => n,Set(WorkingQueue=${CUT(AvailableQueues,^,${QueueCounter})})
   same => n,While($[${EXISTS(${WorkingQueue})}])
   same => n,RemoveQueueMember(${WorkingQueue},${MemberChanType}/${MemberChannel})
   same => n,Set(QueueCounter=$[${QueueCounter} + 1])
   same => n,Set(WorkingQueue=${CUT(AvailableQueues,^,${QueueCounter})})
   same => n,EndWhile()
   same => n,Playback(silence/1&agent-loggedoff)
   same => n,Hangup()



; -------------------------

; Used for pausing agents in all available queues
exten => *10,1,Verbose(2,Pausing member in all queues)
   same => n,GoSub(subSetupAvailableQueues,start,1())

   ; if we don't define a queue, the member is paused in all queues
   same => n,PauseQueueMember(,${MemberChanType}/${MemberChannel})
   same => n,GotoIf($[${PQMSTATUS} = PAUSED]?agent_paused,1:agent_not_found,1)

exten => agent_paused,1,Verbose(2,Agent paused successfully)
   same => n,Playback(silence/1&agent-loggedoff)
   same => n,Hangup()

; -------------------------

; Used for unpausing agents in all available queues
exten => *11,1,Verbose(2,UnPausing member in all queues)
   same => n,GoSub(subSetupAvailableQueues,start,1())

   ; if we don't define a queue, then the member is unpaused from all queues
   same => n,UnPauseQueueMember(,${MemberChanType}/${MemberChannel})
   same => n,GotoIf($[${UPQMSTATUS} = UNPAUSED]?agent_unpaused,1:agent_not_found,1)

exten => agent_unpaused,1,Verbose(2,Agent paused successfully)
   same => n,Playback(silence/1&agent-loginok)
   same => n,Hangup()





[CONTEXT_LOCAL]
include => from-pstn

exten => _[12345679].,1,Dial(SIP/${EXTEN},30,tT)
exten => _[12345679].,n,Voicemail(${EXTEN}@intervoice)
exten => _[12345679].,n,Hangup


exten => 900,1,VoiceMailMain(${CALLERID(num)}@intervoice)
exten => 999,1,MeetMe(1000,M)

;; Insertion dynamique file d'attente ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

exten => *21,1,Verbose(2,Connextion Agent dynamiqe plusieur files the database values)
   same => n,GoSub(subSetupAvailableQueues,start,1())  
   same => n,Set(QueueCounter=1)  ; setup a counter variable
   same => n,Set(WorkingQueue=${CUT(AvailableQueues,^,${QueueCounter})})
   same => n,While($[${EXISTS(${WorkingQueue})}])
   same => n,AddQueueMember(${WorkingQueue},${MemberChanType}/${MemberChannel},,,${MemberChanType}/${MemberChannel})
   same => n,Set(QueueCounter=$[${QueueCounter} + 1])    ; increase our counter
   same => n,Set(WorkingQueue=${CUT(AvailableQueues,^,${QueueCounter})})
   same => n,EndWhile()
   same => n,Playback(silence/1&agent-loginok)
   same => n,Hangup()
exten => no_queues_available,1,Verbose(2,No queues available for ${MemberChannel})
   same => n,Playback(silence/1&channel&not-yet-assigned)
   same => n,Hangup()


   exten => *23,1,Verbose(2,Sortie Agent dynamiqe plusieur files)
; Because we reused some code, we've placed the duplicate code into a subroutine
   same => n,GoSub(subSetupAvailableQueues,start,1())   
   same => n,Set(QueueCounter=1)
   same => n,Set(WorkingQueue=${CUT(AvailableQueues,^,${QueueCounter})})
   same => n,While($[${EXISTS(${WorkingQueue})}])
   same => n,RemoveQueueMember(${WorkingQueue},${MemberChanType}/${MemberChannel})
   same => n,Set(QueueCounter=$[${QueueCounter} + 1])
   same => n,Set(WorkingQueue=${CUT(AvailableQueues,^,${QueueCounter})})
   same => n,EndWhile()
   same => n,Playback(silence/1&agent-loggedoff)
   same => n,Hangup()



; ------------------------- 

; Used for pausing agents in all available queues
exten => *10,1,Verbose(2,Pausing member in all queues)
   same => n,GoSub(subSetupAvailableQueues,start,1())

   ; if we don't define a queue, the member is paused in all queues
   same => n,PauseQueueMember(,${MemberChanType}/${MemberChannel})
   same => n,GotoIf($[${PQMSTATUS} = PAUSED]?agent_paused,1:agent_not_found,1)

exten => agent_paused,1,Verbose(2,Agent paused successfully)
   same => n,Playback(silence/1&agent-loggedoff)
   same => n,Hangup()

; -------------------------

; Used for unpausing agents in all available queues
exten => *11,1,Verbose(2,UnPausing member in all queues)
   same => n,GoSub(subSetupAvailableQueues,start,1())

   ; if we don't define a queue, then the member is unpaused from all queues
   same => n,UnPauseQueueMember(,${MemberChanType}/${MemberChannel})
   same => n,GotoIf($[${UPQMSTATUS} = UNPAUSED]?agent_unpaused,1:agent_not_found,1)

exten => agent_unpaused,1,Verbose(2,Agent paused successfully)
   same => n,Playback(silence/1&agent-loginok)
   same => n,Hangup()

; -------------------------

exten => 888,1,goto(faxreceive,s,1)


[context_ussd]
exten => s,1,Playback(IVR/absence)
exten => s,n,Playback(beep)
exten => s,n,Hangup



[subSetupAvailableQueues]

exten => start,1,Verbose(2,Checking for available queues)
   same => n,Set(MemberChannel=${CHANNEL(peername)})
   same => n,Set(MemberChanType=${CHANNEL(channeltype)})    
   same => n,Set(AvailableQueues=${DB(queue_agent/${MemberChannel}/available_queues)})
   same => n,GotoIf($[${ISNULL(${AvailableQueues})}]?no_queues_available,1) 
   same => n,Return()

exten => no_queues_available,1,Verbose(2,No queues available for agent ${MemberChannel})
   same => n,Playback(silence/1&channel&not-yet-assigned)  
   same => n,Hangup()

[CONTEXT_GSM]
exten => _0[567].,1,NoOp(${CALLERID(name)})
exten => _0[567].,n,dial(DAHDI/G0/${EXTEN})
exten => _0[567].,n,Hangup
exten => _0[234].,1,Playback(privacy-incorrect)
exten => _0[234].,n,Hangup
exten => 900,1,VoiceMailMain(${CALLERID(num)}@intervoice)
exten => 999,1,MeetMe(1000,M)

exten => _*X.,1,Answer()
exten => _*X.,n,ChanSpy(SIP/${EXTEN:1})
exten => _*X.,n,HangUp()

exten => _**X.,1,ringing
exten => _**X.,n,ChanSpy(SIP/${EXTEN:2},w)
exten => _**X.,n,HangUp()

[CONTEXT_INTERNATIONAL]
include => CONTEXT_LOCAL
include => from-pstn
exten => 900,1,VoiceMailMain(${CALLERID(num)}@intervoice)
exten => 999,1,MeetMe(1000,M)

exten => _[0].,1,NoOp(${EXTEN})
exten => _[0].,n,dial(DAHDI/G0/${EXTEN})
exten => _[0].,n,Hangup



exten => _*X.,1,Answer()
exten => _*X.,n,ChanSpy(SIP/${EXTEN:1})
exten => _*X.,n,HangUp()

exten => _**X.,1,ringing
exten => _**X.,n,ChanSpy(SIP/${EXTEN:2},w)
exten => _**X.,n,HangUp()

[CONTEXT_SPY]

exten => _*X.,1,Answer()
exten => _*X.,n,ChanSpy(SIP/${EXTEN:1})
exten => _*X.,n,HangUp()

exten => _**X.,1,ringing
exten => _**X.,n,ChanSpy(SIP/${EXTEN:2},w)
exten => _**X.,n,HangUp()

exten => 900,1,VoiceMailMain(${CALLERID(num)}@intervoice)
exten => 999,1,MeetMe(1000,M)
exten => 888,1,goto(faxreceive,s,1)


[CONTEXT_A]
include => CONTEXT_LOCAL
exten => _0[23456789].,1,NoOp(${EXTEN})
exten => _0[23456789].,n,dial(DAHDI/G0/${EXTEN})
exten => _0[23456789].,n,Hangup



[CONTEXT_B]
exten => _0[23456789].,1,NoOp(${EXTEN})
exten => _0[23456789].,n,dial(DAHDI/G0/${EXTEN})
exten => _0[23456789].,n,Hangup
exten => _[1234].,1,Playback(privacy-incorrect)
exten => _[1234].,n,Hangup


[CONTEXT_C]
include => CONTEXT_FIX
include => CONTEXT_LOCAL
exten => _0[567].,1,Playback(privacy-incorrect)
exten => _0[567].,n,Hangup


[CONTEXT_D]
include => CONTEXT_GSM
include => CONTEXT_LOCAL
exten => _0[234].,1,Playback(privacy-incorrect)
exten => _0[234].,n,Hangup

;;///////////////////////////////////////////////option enregistrement///////////////////////////////




[CONTEXT_A_R]
include => CONTEXT_LOCAL
exten => _0[23456789].,1,Set(FILENAME=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-outbound-${CALLERID(num)}-${EXTEN}-${UNIQUEID}.wav)   
exten => _0[23456789].,n,MixMonitor(${FILENAME},b,/home/support/bin/monitor_file.sh ${FILENAME})
exten => _0[23456789].,n,dial(DAHDI/G0/${EXTEN})
exten => _0[23456789].,n,Hangup




[CONTEXT_B_R]
exten => _0[23456789].,1,Set(FILENAME=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-outbound-${CALLERID(num)}-${EXTEN}-${UNIQUEID}.wav)
exten => _0[23456789].,n,MixMonitor(${FILENAME},b,/home/support/bin/monitor_file.sh ${FILENAME})
exten => _0[23456789].,n,dial(DAHDI/G0/${EXTEN})
exten => _0[23456789].,n,Hangup
exten => _[1234].,1,Playback(privacy-incorrect)
exten => _[1234].,n,Hangup


[CONTEXT_C_R]
include => CONTEXT_FIX_R
include => CONTEXT_LOCAL
exten => _0[567].,1,Playback(privacy-incorrect)
exten => _0[567].,n,Hangup


[CONTEXT_D_R]
include => CONTEXT_GSM_R
include => CONTEXT_LOCAL
exten => _0[234].,1,Playback(privacy-incorrect)
exten => _0[234].,n,Hangup


[CONTEXT_INTERNATIONAL_R]
include => CONTEXT_LOCAL
include => from-pstn
exten => 900,1,VoiceMailMain(${CALLERID(num)}@intervoice)
exten => 999,1,MeetMe(1000,M)
exten => _[0].,1,Set(FILENAME=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-outbound-${CALLERID(num)}-${EXTEN}-${UNIQUEID}.wav)   
exten => _[0].,n,MixMonitor(${FILENAME},b,/home/support/bin/monitor_file.sh ${FILENAME})
exten => _[0].,n,dial(DAHDI/G0/${EXTEN})
exten => _[0].,n,Hangup

exten => _*X.,1,Answer()
exten => _*X.,n,ChanSpy(SIP/${EXTEN:1})
exten => _*X.,n,HangUp()




[CONTEXT_GSM_R]
exten => _0[567].,1,Set(FILENAME=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-outbound-${CALLERID(num)}-${EXTEN}-${UNIQUEID}.wav)   
exten => _0[567].,n,MixMonitor(${FILENAME},b,/home/support/bin/monitor_file.sh ${FILENAME})
exten => _0[567].,n,dial(DAHDI/G0/${EXTEN})
exten => _0[567].,n,Hangup
exten => _0[234].,1,Playback(privacy-incorrect)
exten => _0[234].,n,Hangup
exten => 900,1,VoiceMailMain(${CALLERID(num)}@intervoice)
exten => 999,1,MeetMe(1000,M)

exten => _*X.,1,Answer()
exten => _*X.,n,ChanSpy(SIP/${EXTEN:1})
exten => _*X.,n,HangUp()

exten => _**X.,1,ringing
exten => _**X.,n,ChanSpy(SIP/${EXTEN:2},w)
exten => _**X.,n,HangUp()
[CONTEXT_FIX_R]

exten => _0[234].,1,Set(FILENAME=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-outbound-${CALLERID(num)}-${EXTEN}-${UNIQUEID}.wav)   
exten => _0[234].,n,MixMonitor(${FILENAME},b,/home/support/bin/monitor_file.sh ${FILENAME})
exten => _0[234].,n,dial(DAHDI/G0/${EXTEN})
exten => _0[234].,n,Hangup
exten => _0[567].,1,Playback(privacy-incorrect)
exten => _0[567].,n,Hangup
exten => 900,1,VoiceMailMain(${CALLERID(num)}@intervoice)
exten => 999,1,MeetMe(1000,M)

[to-pstn]

exten => _2.,1,Dial(SIP/${EXTEN},15,tT)
exten => _2.,2,Voicemail(${EXTEN}@intervoice)

exten => _1.,1,Dial(SIP/${EXTEN},15,tT)
exten => _1.,2,Voicemail(${EXTEN}@intervoice)

exten => _0.,1,dial(DAHDI/3/${EXTEN})



;;;;;;;;;;;;;;;;


[GATEWAY]
exten => _X.,1,Macro(gsmentrant,n_poste,beep,${NUMTEL})
exten => _X.,2,noop(${NUMTEL})

;//////////////////////////////////////////////  fax le bon /////////////////////////////////////////


[faxreceive]
 exten => s,1,Answer()
 exten => s,n,Wait(1)
 exten => s,n,Set(FAXFILE=/var/spool/asterisk/tmp/${UNIQUEID})
 exten => s,n,Set(FICHIERTIFF=fax__${EXTEN}_${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}_${CALLERID(num)})
 exten => s,n,Set(EXTMAIL=support@compusave-it.dz)
 exten => s,n,Set(EXTNAME=CSBox)
 exten => s,n,Set(PDF=/var/www/html/csbox/data/fax/${FICHIERTIFF}.pdf)
 exten => s,n,ReceiveFAX(${FAXFILE}.tif)
 exten => s,n,System(tiff2pdf ${FAXFILE}.tif -o ${PDF})
 exten => s,n,NoOP(/var/lib/asterisk/agi-bin/mailfax "${CALLERID(num)}" "${CALLEDFAX}" "${EXTNAME}" "${EXTMAIL}" "${FAXFILE}" "${EXTCOMPANY}")
 exten => s,n,System(/var/lib/asterisk/agi-bin/mailfax "${CALLERID(num)}" "${CALLEDFAX}" "${EXTNAME}" "${EXTMAIL}" "${FAXFILE}" "${EXTCOMPANY}")
 exten => s,n,Hangup()
 exten => h,1,NoOp(###       FAXSTATUS: ${FAXSTATUS})
 exten => h,n,NoOp(###        FAXERROR: ${FAXERROR})
 exten => h,n,NoOp(###         FAXMODE: ${FAXMODE})
 exten => h,n,NoOp(###        FAXPAGES: ${FAXPAGES})
 exten => h,n,NoOp(###      FAXBITRATE: ${FAXBITRATE})
 exten => h,n,NoOp(###   FAXRESOLUTION: ${FAXRESOLUTION})
 exten => h,n,NoOp(### REMOTESTATIONID: ${REMOTESTATIONID})


[send-fax]
exten => 100,1,NoOP(“Sending FAX, File:${FAX_FILE_NAME}”)
exten => 100,n,NoOP(“Sending FAX, numero :${TELE}”)
exten => 100,n,sendFax(${FAX_FILE_NAME})

exten => failed,1,Set(FAXSTATUS=DIALFAIL)
exten => failed,n,Set(FAXERROR=No Answer)
exten => failed,n,Set(FAXPAGES=0)
exten => failed,n,Hangup

exten => h,1,NoOp(“Fax Status: ${FAXSTATUS}”)
exten => h,n,NoOp(“Fax Error : ${FAXERROR}”)
exten => h,n,NoOp(“Fax Pages : ${FAXPAGES}”)
exten => h,n,GoToIf($["${FAXSTATUS}"="SUCCESS"]?send-fax-success,1,1)
exten => h,n,GoToIf($["${FAXSTATUS}"="FAILED"]?send-fax-failed,1,1)
exten => h,n,GoToIf($["${FAXSTATUS}"="DIALFAIL"]?send-fax-dial-failed,1,1)


[send-fax-success]
exten => 1,1,NoOp(“FAX SUCCESS”)
exten => 1,n,MYSQL(Connect connid localhost root csbox@2013 asterisk)
exten => 1,n,MYSQL(Query resultid ${connid} UPDATE `fax_envois` SET `STATUS`='${FAXSTATUS}' WHERE `file` like '%${FAXFILE}'  and `num` ='${TELE}' and  (`STATUS` = '0' or `STATUS` = 'No Answer' ))
exten => 1,n,MYSQL(Disconnect ${connid})


[send-fax-failed]
exten => 1,1,NoOp(“FAX FAILED”)
exten => 1,n,MYSQL(Connect connid localhost root csbox@2013 asterisk)
exten => 1,n,MYSQL(Query resultid ${connid} UPDATE `fax_envois` SET `STATUS`='${FAXERROR}' WHERE `file` like '%${FAXFILE}'  and `num` ='${TELE}' and  (`STATUS` = '0' or `STATUS` = 'No Answer' ))
exten => 1,n,MYSQL(Disconnect ${connid})

[send-fax-dial-failed]
exten => 1,1,NoOp(“FAX DIAL FAILED: ${MAX_RETRY}”)
exten => 1,n,MYSQL(Connect connid localhost root csbox@2013 asterisk)
exten => 1,n,MYSQL(Query resultid ${connid} UPDATE `fax_envois` SET `STATUS`='${FAXERROR}' WHERE `file` like '%${FAXFILE}'  and `num` ='${TELE}' and  (`STATUS` = '0' or `STATUS` = 'No Answer' ))
exten => 1,n,MYSQL(Disconnect ${connid})



[record_callin]
exten => s,1,NoOp(Start record)
same => n,Set(FILENAME=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-inbound-${CALLERID(num)}-${EXTEN}-${UNIQUEID}.wav)
same => n,MixMonitor(${FILENAME},b,/home/support/bin/monitor_file.sh ${FILENAME})
same => n,return












[Test-Rbh_absence]
switch => Realtime
